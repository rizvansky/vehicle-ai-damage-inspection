[tool.poetry]
name = "vehicle-segmentation-models"
package-mode = false
version = "0.1.0"
description = "Semantic and instance segmentation training pipeline"
authors = ["Rizvan Iskaliev <rizvaninno@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/vlx-carinspect/vehicle-segmentation-models"
repository = "https://github.com/vlx-carinspect/vehicle-segmentation-models"
documentation = "https://github.com/vlx-carinspect/vehicle-segmentation-models"

[tool.poetry.dependencies]
python = ">=3.10"
torch = ">=2.0.0"
torchvision = ">=0.15.0"
pytorch-lightning = ">=2.0.0"
onnx = "^1.18.0"
onnxruntime = "^1.22.0"
tritonclient = "^2.59.0"
hydra-core = "^1.3.2"
hydra-colorlog = "^1.2.0"
hydra-optuna-sweeper = "^1.2.0"
transformers = "^4.53.0"
timm = "^1.0.16"
segmentation-models-pytorch = "^0.5.0"
pycocotools = "^2.0.10"
albumentations = "^2.0.8"
pillow = "^11.2.1"
pandas = "^2.3.0"
matplotlib = "^3.10.3"
seaborn = "^0.13.2"
rich = "^14.0.0"
tensorboard = "^2.19.0"
mlflow = "^3.1.1"
clearml = "^2.0.1"
onnxsim = "^0.4.36"
rootutils = "^1.0.7"
lightning = "^2.5.2"
optimum = "^1.26.1"
onnxconverter-common = "^1.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-mock = "^3.14.1"
ruff = "^0.12.1"
pre-commit = "^4.2.0"
bandit = "^1.8.5"
safety = "^3.5.2"
black = "^25.1.0"
isort = "^6.0.1"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py310"
lint.select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "I",       # isort
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
]
lint.ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "B017",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 100
target-version = ['py310']

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--disable-warnings",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::FutureWarning",
    "ignore::DeprecationWarning",
]
